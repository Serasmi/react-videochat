import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import type { RootState } from "../../app/store";
import { fetchMessages } from "./messagesAPI";
import type { IMessage } from "../message/types";

export interface MessagesState {
  messages: IMessage[];
  status: "idle" | "loading" | "failed";
}

const initialState: MessagesState = {
  messages: [],
  status: "idle",
};

const sliceName = "messages";

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadMessages = createAsyncThunk(
  `${sliceName}/fetchMessages`,
  async () => {
    const response = await fetchMessages();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const messagesSlice = createSlice({
  name: sliceName,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addMessage: (state, action: PayloadAction<IMessage>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.messages.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadMessages.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loadMessages.fulfilled, (state, action) => {
        state.status = "idle";
        state.messages = action.payload;
      });
  },
});

export const { addMessage } = messagesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMessages = (state: RootState) => state.messages.messages;
export const selectStatus = (state: RootState) => state.messages.status;

export default messagesSlice.reducer;
